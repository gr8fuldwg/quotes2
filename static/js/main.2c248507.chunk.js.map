{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QUOTE_API","DOGS_API","App","props","state","on","imageURL","showContent","error","handle","bind","quote","kanye","dogs","toggleContent","mount","componentWillMount","k","document","getElementById","color","style","addEventListener","event","preventDefault","this","setState","axios","get","then","response","data","message","catch","console","log","err","quoteText","quoteAuthor","hyphen","name","value","className","id","src","alt","type","onClick","makeGray","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c248507.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n// import Quote from \"./helpers.js/quote.js\";\n\n// API URL variables\nconst CHUCK_API = \"https://api.chucknorris.io/jokes/random\";\nconst QUOTE_API = \"https://quote-garden.herokuapp.com/api/v3/quotes/random\";\nconst KANYE_API = \"https://api.kanye.rest\";\nconst DOGS_API = \"https://dog.ceo/api/breeds/image/random\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      on: false,\n      imageURL: \"\",\n      showContent: true,\n      error: null,\n    };\n\n    // Binding methods\n    this.handle = this.handle.bind(this);\n    this.quote = this.quote.bind(this);\n    this.kanye = this.kanye.bind(this);\n    this.dogs = this.dogs.bind(this);\n    this.toggleContent = this.toggleContent.bind(this);\n    this.mount = this.componentWillMount.bind(this);\n  }\n\n  makeGray() {\n    var k = document.getElementById(\"kGray\");\n    var color = k.style.color;\n    k.addEventListener(\"click\", function () {\n      // this function executes whenever the user clicks the button\n      color = k.style.color = color === \"grey\";\n    });\n  }\n\n  toggleContent(event) {\n    event.preventDefault();\n    this.setState({\n      showContent: !this.state.showContent,\n    });\n  }\n\n  // Dog Photo Axios GET request\n  async componentDidMount() {\n    await axios\n      .get(DOGS_API)\n      .then((response) => {\n        this.setState({ imageURL: response.data.message });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  dogs() {\n    axios\n      .get(DOGS_API)\n      .then((response) => {\n        const { message } = response.data;\n        this.setState({\n          message: message,\n          imageURL: response.data.message,\n          error: null,\n        });\n      })\n\n      .catch((err) => {\n        this.setState({\n          error: err,\n        });\n        console.log(\"error\");\n      });\n  }\n\n  // 'Inspirational Quotes' Axios GET method\n\n  quote() {\n    axios\n      .get(QUOTE_API)\n      .then((response) => {\n        const { quoteText } = response.data.data[0].quoteText;\n        const { quoteAuthor } = response.data.data[0].quoteAuthor;\n        this.setState({\n          quoteText: quoteText,\n          quoteAuthor: quoteAuthor,\n          hyphen: \" -\",\n          error: null,\n        });\n        console.log(response.data.data[0].quoteText);\n        console.log(response.data.data[0].quoteAuthor);\n      })\n\n      .catch((err) => {\n        this.setState({\n          error: err,\n        });\n        console.log(\"error\");\n      });\n  }\n\n  async componentWillMount() {\n    await axios\n      .get(QUOTE_API)\n      .then((response) => {\n       this.setState({\n          quoteText: response.data.data[0].quoteText,\n          quoteAuthor: response.data.data[0].quoteAuthor,\n          hyphen: \"- \",\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // Kanye Quotes Axios GET method\n  kanye() {\n    axios\n      .get(KANYE_API)\n      .then((response) => {\n        const { quote } = response.data;\n        this.setState({\n          quote: quote,\n          name: \" - Kanye West\",\n          error: null,\n        });\n      })\n\n      .catch((err) => {\n        this.setState({\n          error: err,\n        });\n        console.log(\"error\");\n      });\n  }\n\n  // Chuck Joke Axios GET method\n  handle() {\n    axios\n      .get(CHUCK_API)\n      .then((response) => {\n        const { value } = response.data;\n        this.setState({\n          value: value,\n          error: null,\n        });\n        console.log(this.state.value);\n      })\n\n      .catch((err) => {\n        this.setState({\n          error: err,\n        });\n        console.log(\"error\");\n      });\n  }\n\n  // Render API's to DOM via buttons\n  render() {\n    const { imageURL } = this.state;\n    const { showContent } = this.state;\n\n    return (\n      <div className=\"body\">\n        <h1 className=\"head\">A wise dog once said...</h1>\n\n        <img id=\"dog\" src={imageURL} alt=\"dog\" />\n\n        {/* *** BUTTONS *** */}\n        <section className=\"d-flex ml-2 mt-2 mr-2 mb-2\" id=\"buttons\">\n          {/* Chuck */}\n          <button\n            id=\"chaz\"\n            type=\"button\"\n            className=\"chux chuckbutton btn btn-outline-danger\"\n            onClick={this.handle}\n          >\n            Chaz\n          </button>\n\n          {/* Inspiration */}\n          <button\n            id=\"inspiration\"\n            type=\"button\"\n            className=\"inspire ml-2 btn btn-dark \"\n            onClick={this.mount}\n          >\n            Inspire\n          </button>\n\n          {/* Kanye */}\n          <button\n            type=\"button\"\n            className=\"kanye btn btn-outline-warning\"\n            onClick={this.kanye}\n          >\n            Kanye\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-outline-primary\"\n            onClick={this.dogs}\n          >\n            Dogs\n          </button>\n        </section>\n        {/* End Buttons */}\n\n        {/* **** QUOTES **** */}\n\n        {/* Inspiration */}\n        <h1 className=\"quote d-flex pt-4\">\"{this.state.quoteText}\"</h1>\n        <h3 className=\"fade1 name d-flex pb-4\">\n          {this.state.hyphen}\n          {this.state.quoteAuthor}\n        </h3>\n\n        {/* Kanye */}\n        {showContent === true ? (\n          <h1 onClick={this.toggleContent} className=\"kanye d-flex pt-4\">\n            {this.state.quote}\n          </h1>\n        ) : (\n          \"\"\n        )}\n\n        <div className=\"d-flex row \">\n          <div className=\"d-flex col justify-content-center text-center \">\n            <button\n              type=\"button\"\n              id=\"kGray\"\n              className=\"btn btn-outline-primary \"\n              onClick={() => this.makeGray()}\n            >\n              <h3\n                onClick={this.toggleContent.bind(this)}\n                className=\"grey-after pt-4 fade2 kanye d-flex pb-4\"\n              >\n               {this.state.name}\n              </h3>\n            </button>\n          </div>\n        </div>\n\n        {/* Chuck */}\n        <h1 className=\"fade3 chaz d-flex pt-4 pb-4\">{this.state.value}</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
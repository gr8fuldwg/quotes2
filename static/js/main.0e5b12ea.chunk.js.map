{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["QUOTE_API","DOGS_API","App","props","state","on","imageURL","showContent","error","handle","bind","quote","kanye","dogs","toggleContent","mount","componentWillMount","event","preventDefault","this","setState","axios","get","then","response","data","message","catch","console","log","err","quoteText","quoteAuthor","hyphen","name","value","className","id","src","alt","activeClass","to","spy","auto","type","onClick","style","top","bottom","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e5b12ea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { Link } from \"react-scroll\";\n// import Quote from \"./helpers.js/quote.js\";\n\n// API URL variables\nconst CHUCK_API = \"https://api.chucknorris.io/jokes/random\";\nconst QUOTE_API = \"https://quote-garden.herokuapp.com/api/v3/quotes/random\";\nconst KANYE_API = \"https://api.kanye.rest\";\nconst DOGS_API = \"https://dog.ceo/api/breeds/image/random\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      on: false,\n      imageURL: \"\",\n      showContent: true,\n      error: null,\n    };\n\n    // Binding methods\n    this.handle = this.handle.bind(this);\n    this.quote = this.quote.bind(this);\n    this.kanye = this.kanye.bind(this);\n    this.dogs = this.dogs.bind(this);\n    this.toggleContent = this.toggleContent.bind(this);\n    this.mount = this.componentWillMount.bind(this);\n  }\n\n  toggleContent(event) {\n    event.preventDefault();\n    this.setState({\n      showContent: !this.state.showContent,\n    });\n  }\n\n  // Dog Photo Axios GET request\n  async componentDidMount() {\n    await axios\n      .get(DOGS_API)\n      .then((response) => {\n        this.setState({ imageURL: response.data.message });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  dogs() {\n    axios\n      .get(DOGS_API)\n      .then((response) => {\n        const { message } = response.data;\n        this.setState({\n          message: message,\n          imageURL: response.data.message,\n          error: null,\n        });\n      })\n\n      .catch((err) => {\n        this.setState({\n          error: err,\n        });\n        console.log(\"error\");\n      });\n  }\n\n  // 'Inspirational Quotes' Axios GET method\n  quote() {\n    axios\n      .get(QUOTE_API)\n      .then((response) => {\n        const { quoteText } = response.data.data[0].quoteText;\n        const { quoteAuthor } = response.data.data[0].quoteAuthor;\n        this.setState({\n          quoteText: quoteText,\n          quoteAuthor: quoteAuthor,\n          hyphen: \" -\",\n          error: null,\n        });\n      })\n\n      .catch((err) => {\n        this.setState({\n          error: err,\n        });\n        console.log(\"error\");\n      });\n  }\n\n  async componentWillMount() {\n    await axios\n      .get(QUOTE_API)\n      .then((response) => {\n        this.setState({\n          quoteText: response.data.data[0].quoteText,\n          quoteAuthor: response.data.data[0].quoteAuthor,\n          hyphen: \"- \",\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // Kanye Quotes Axios GET method\n  kanye() {\n    axios\n      .get(KANYE_API)\n      .then((response) => {\n        const { quote } = response.data;\n        this.setState({\n          quote: quote,\n          name: \" - Kanye West\",\n          error: null,\n        });\n      })\n\n      .catch((err) => {\n        this.setState({\n          error: err,\n        });\n        console.log(\"error\");\n      });\n  }\n\n  // Chuck Joke Axios GET method\n  handle() {\n    axios\n      .get(CHUCK_API)\n      .then((response) => {\n        const { value } = response.data;\n        this.setState({\n          value: value,\n          error: null,\n        });\n        console.log(this.state.value);\n      })\n\n      .catch((err) => {\n        this.setState({\n          error: err,\n        });\n        console.log(\"error\");\n      });\n  }\n\n  // Render API's to DOM via buttons\n  render() {\n    const { imageURL } = this.state;\n    const { showContent } = this.state;\n\n    return (\n      <div className=\"body\">\n        <h1 className=\"head\">A wise dog once said...</h1>\n        <img id=\"dog\" src={imageURL} alt=\"dog\" />\n\n        {/* *** BUTTONS *** */}\n        <section className=\"d-flex ml-2 mt-2 mr-2 mb-2\" id=\"buttons\">\n          {/* Chuck */}\n          <Link activeClass=\"active\" to=\"chazBubble\" spy={true} auto={true}>\n            <button\n              id=\"chaz\"\n              className=\"pt-1 pb-1 pl-1 pr-1 btn btn-outline-danger\"\n              type=\"button\"\n              onClick={this.handle}\n            >\n              Chaz\n            </button>\n          </Link>\n\n          {/* Inspiration */}\n          <Link to=\"quoteBubble\" spy={true} auto={true}>\n            <button\n              id=\"inspiration\"\n              type=\"button\"\n              className=\"pt-1 pb-1 pl-1 pr-1 inspire ml-2 btn btn-dark \"\n              onClick={this.mount}\n            >\n              Inspire\n            </button>\n          </Link>\n\n          {/* Kanye */}\n          <Link to=\"kanye-quote\" spy={true} auto={true}>\n            <button\n              type=\"button\"\n              id=\"kanye-button\"\n              className=\"pt-1 pb-1 pl-1 pr-1 kanye btn btn-outline-warning\"\n              onClick={this.kanye}\n            >\n              Kanye\n            </button>\n          </Link>\n\n          <Link to=\"dog\" spy={true} auto={true}>\n            <button\n              type=\"button\"\n              id=\"dog-button\"\n              className=\"pt-1 pb-1 pl-1 pr-1 btn btn-outline-primary\"\n              onClick={this.dogs}\n            >\n              Dogs\n            </button>\n          </Link>\n        </section>\n        {/* End Buttons */}\n\n        {/* QUOTES!!! */}\n\n        {/* Inspiration */}\n        <section id=\"quoteBubble\">\n          <h1\n            onClick={this.mount}\n            className=\"quote d-flex pt-4\"\n            style={{ top: 0 }}\n          >\n            \"{this.state.quoteText}\"\n          </h1>\n          <h3 className=\"fade1 name d-flex pb-4\">\n            {this.state.hyphen}\n            {this.state.quoteAuthor}\n          </h3>\n        </section>\n\n        {/* Kanye */}\n        {showContent === true ? (\n          <h1\n            onClick={this.kanye}\n            id=\"kanye-quote\"\n            className=\"kanye kanye-bubble d-flex\"\n          >\n            \"{this.state.quote}\"\n          </h1>\n        ) : (\n          \"\"\n        )}\n\n        <div className=\"d-flex pb-4 justify-content-center\">\n          <h3\n            onClick={this.toggleContent.bind(this)}\n            className=\"d-flex kanye-name grey-after pt-2 fade2 pb-2\"\n          >\n            {this.state.name}\n          </h3>\n        </div>\n\n        {/* Chuck */}\n        <section id=\"chazBubble\" style={{ bottom: 0 }}>\n          <h1 onClick={this.handle} className=\"chaz d-flex pt-2 pb-2\">\n            {this.state.value}\n          </h1>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}